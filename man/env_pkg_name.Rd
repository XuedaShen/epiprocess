% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_conditions.R
\name{env_pkg_name}
\alias{env_pkg_name}
\title{Get the name of the package that calls this, or of another env or call}
\usage{
env_pkg_name(
  env = caller_env(),
  global_hit_result = function(input_env, current_env)
    Abort(env_pkg_name_global_hit_text, "env_pkg_name__global_hit", lst(input_env,
    current_env)),
  empty_hit_result = function(input_env, current_env)
    Abort(env_pkg_name_empty_hit_text, "env_pkg_name__empty_hit", lst(input_env,
    current_env)),
  imports_hit_result = function(input_env, current_env)
    Abort(env_pkg_name_imports_hit_text, "env_pkg_name__imports_hit", lst(input_env,
    current_env)),
  exports_hit_result = function(input_env, current_env)
    Abort(env_pkg_name_exports_hit_text, "env_pkg_name__exports_hit", lst(input_env,
    current_env)),
  namespace_hit_result = function(input_env, current_env) sub("^namespace:", "",
    environmentName(current_env))
)
}
\arguments{
\item{env}{optional; a function execution environment, a function's enclosure
environment, or other environment; by default, the function execution
environment from which this function was called (the caller's execution
environment) or the global environment, if it was not called from another
function, so that, if this function is called with no args from a package
function, it will give its package's name, and if it is called from a
global function, will give the default \code{global_hit_result}}

\item{global_hit_result}{optional; non-function or a \verb{function(input_env, current_env) <result>}; what result to return when there appears to be no
associated package, and the global environment is hit during the ancestor
search. This is the expected result when this function is called from code
outside of a package (but it may also happen if the caller grabbed \code{env}
from the call stack, and jumped the wrong number of stack frames). The
default is to raise an error in this case, but pass in a string here and it
will be returned instead.}

\item{empty_hit_result}{optional; non-function or a \verb{function(input_env, current_env) <result>}; what result to return when there appears to be no
associated package, and the empty environment is hit during the ancestor
search. This is expected to happen if called on an environment default is
to produce an error.}

\item{imports_hit_result}{optional; non-function or a \verb{function(input_env, current_env) <result>}; what result to return when there appears to be no
associated package, and a package imports environment is hit during the
ancestor search. This case is expected to occur only in advanced use when
there's been some issue with requesting the wrong ancestor of an
environment when preparing the \code{env} argument. Default is to produce an
error.}

\item{exports_hit_result}{optional; non-function or a \verb{function(input_env, current_env) <result>}; what result to return when there appears to be no
associated package, and a package exports environment is hit during the
ancestor search. This is not expected to occur in any foreseen use case,
and might only be possible if, after the package is attached, \code{env} is
manually constructed as a descendant of the package exports environment.
Default is to produce an error.}

\item{namespace_hit_result}{optional; non-function or a \verb{function(input_env, current_env) <result>}; what result to return when we successfully find a
package namespace environment among \code{env} or its ancestors;}
}
\value{
a string containing the associated package name, or one of the
overrides specified in {\code{global_hit_result}, \code{empty_hit_result},
\code{imports_hit_result}, \code{exports_hit_result}, \code{namespace_hit_result}}
}
\description{
Specifically, check \code{env} and its ancestors until finding a package namespace
environment, and return the name of that package. By default, \code{env} is the
calling environment, so this function can be used to get the name of a
package from inside one of its functions. If during the search, the global
environment, empty environment, or a package imports environment is
encountered, then the search has failed, as a package namespace environment
should not be an ancestor of any of those environments; by default, output an
error based on the first of these environments encountered.
}
\details{
The tests to detect a package imports and exports environments are
mostly name-based and thus may be a little imprecise, but also may be more
robust to any package-related environment restructuring that may happen (or
may have happened already) in other versions of R.
}
