% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide.R
\name{epi_slide_mean}
\alias{epi_slide_mean}
\title{Optimized slide function for performing rolling averages on an \code{epi_df} object}
\usage{
epi_slide_mean(
  x,
  col_names,
  ...,
  before,
  after,
  ref_time_values,
  time_step,
  new_col_names = "slide_value",
  as_list_col = NULL,
  names_sep = "_",
  all_rows = FALSE
)
}
\arguments{
\item{x}{The \code{epi_df} object under consideration, \link[dplyr:group_by]{grouped}
or ungrouped. If ungrouped, all data in \code{x} will be treated as part of a
single data group.}

\item{col_names}{A character vector of the names of one or more columns for
which to calculate the rolling mean.}

\item{...}{Additional arguments to pass to \code{data.table::frollmean}, for
example, \code{na.rm} and \code{algo}. \code{data.table::frollmean} is automatically
passed the data \code{x} to operate on, the window size \code{n}, and the alignment
\code{align}. Providing these args via \code{...} will cause an error.}

\item{before, after}{How far \code{before} and \code{after} each \code{ref_time_value} should
the sliding window extend? At least one of these two arguments must be
provided; the other's default will be 0. Any value provided for either
argument must be a single, non-\code{NA}, non-negative,
\link[vctrs:vec_cast]{integer-compatible} number of time steps. Endpoints of
the window are inclusive. Common settings:
\itemize{
\item For trailing/right-aligned windows from \code{ref_time_value - time_step (k)} to \code{ref_time_value}: either pass \code{before=k} by itself, or pass
\verb{before=k, after=0}.
\item For center-aligned windows from \code{ref_time_value - time_step(k)} to
\code{ref_time_value + time_step(k)}: pass \verb{before=k, after=k}.
\item For leading/left-aligned windows from \code{ref_time_value} to
\code{ref_time_value + time_step(k)}: either pass pass \code{after=k} by itself,
or pass \verb{before=0, after=k}.
See "Details:" about the definition of a time step,(non)treatment of
missing rows within the window, and avoiding warnings about
\code{before}&\code{after} settings for a certain uncommon use case.
}}

\item{ref_time_values}{Time values for sliding computations, meaning, each
element of this vector serves as the reference time point for one sliding
window. If missing, then this will be set to all unique time values in the
underlying data table, by default.}

\item{time_step}{Optional function used to define the meaning of one time
step, which if specified, overrides the default choice based on the
\code{time_value} column. This function must take a non-negative integer and
return an object of class \code{lubridate::period}. For example, we can use
\code{time_step = lubridate::hours} in order to set the time step to be one hour
(this would only be meaningful if \code{time_value} is of class \code{POSIXct}).}

\item{new_col_names}{String indicating the name of the new column that will
contain the derivative values. Default is "slide_value"; note that setting
\code{new_col_names} equal to an existing column name will overwrite this column.}

\item{as_list_col}{Not supported. Included to match \code{epi_slide} interface.}

\item{names_sep}{String specifying the separator to use in \code{tidyr::unnest()}
when \code{as_list_col = FALSE}. Default is "_". Using \code{NULL} drops the prefix
from \code{new_col_names} entirely.}

\item{all_rows}{If \code{all_rows = TRUE}, then all rows of \code{x} will be kept in
the output even with \code{ref_time_values} provided, with some type of missing
value marker for the slide computation output column(s) for \code{time_value}s
outside \code{ref_time_values}; otherwise, there will be one row for each row in
\code{x} that had a \code{time_value} in \code{ref_time_values}. Default is \code{FALSE}. The
missing value marker is the result of \code{vctrs::vec_cast}ing \code{NA} to the type
of the slide computation output.}
}
\value{
An \code{epi_df} object given by appending one or more new columns to
\code{x}, depending on the \code{col_names} argument, named according to the
\code{new_col_names} argument.
}
\description{
Slides an n-timestep mean over variables in an \code{epi_df} object. See the \href{https://cmu-delphi.github.io/epiprocess/articles/slide.html}{slide vignette} for
examples.
}
\details{
To "slide" means to apply a function or formula over a rolling
window of time steps for each data group, where the window is entered at a
reference time and left and right endpoints are given by the \code{before} and
\code{after} arguments. The unit (the meaning of one time step) is implicitly
defined by the way the \code{time_value} column treats addition and subtraction;
for example, if the time values are coded as \code{Date} objects, then one time
step is one day, since \code{as.Date("2022-01-01") + 1} equals
\code{as.Date("2022-01-02")}. Alternatively, the time step can be set explicitly
using the \code{time_step} argument (which if specified would override the
default choice based on \code{time_value} column). If there are not enough time
steps available to complete the window at any given reference time, then
\code{epi_slide()} still attempts to perform the computation anyway (it does not
require a complete window). The issue of what to do with partial
computations (those run on incomplete windows) is therefore left up to the
user, either through the specified function or formula \code{f}, or through
post-processing. For a centrally-aligned slide of \code{n} \code{time_value}s in a
sliding window, set \code{before = (n-1)/2} and \code{after = (n-1)/2} when the
number of \code{time_value}s in a sliding window is odd and \code{before = n/2-1} and
\code{after = n/2} when \code{n} is even.

Sometimes, we want to experiment with various trailing or leading window
widths and compare the slide outputs. In the (uncommon) case where
zero-width windows are considered, manually pass both the \code{before} and
\code{after} arguments in order to prevent potential warnings. (E.g., \code{before=k}
with \code{k=0} and \code{after} missing may produce a warning. To avoid warnings,
use \verb{before=k, after=0} instead; otherwise, it looks too much like a
leading window was intended, but the \code{after} argument was forgotten or
misspelled.)
}
\examples{
# slide a 7-day trailing average formula on cases
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean("cases", new_col_names = "cases_7dav", names_sep = NULL, before = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 7-day trailing average formula on cases. Adjust `frollmean` settings for speed
# and accuracy, and to allow partially-missing windows.
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean("cases", new_col_names = "cases_7dav", names_sep = NULL, before = 6,
    # `frollmean` options
    na.rm = TRUE, algo = "exact", hasNA = TRUE
  ) \%>\%
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 7-day leading average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean("cases", new_col_names = "cases_7dav", names_sep = NULL, after = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 7-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean("cases", new_col_names = "cases_7dav", names_sep = NULL, before = 3, after = 3) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 14-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean("cases", new_col_names = "cases_14dav", names_sep = NULL, before = 6, after = 7) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_14dav) \%>\%
  ungroup()
}
\seealso{
\code{\link{epi_slide}}
}
