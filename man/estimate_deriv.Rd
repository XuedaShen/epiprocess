% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derivative.R
\name{estimate_deriv}
\alias{estimate_deriv}
\title{Estimate derivative}
\usage{
estimate_deriv(
  var,
  method = c("lin", "ss", "tf"),
  deriv = 1,
  na_rm = FALSE,
  keep_obj = FALSE,
  ...
)
}
\arguments{
\item{var}{The variable whose derivative is to be estimated.}

\item{method}{One of "lin", "ss", or "tf" indicating the method to use for
the derivative calculation. We run the given method using \code{var} as the
response variable, assuming an equally-spaced sequence of design points,
and return the corresponding estimated derivative (that is, the derivative
of the underlying estimated function, linear or spline) at the end of the
sequence. Default is "lin". See details for more explanation.}

\item{deriv}{Order of derivative to estimate. Only orders 1 or 2 are
supported, with the default being 1. (In some cases, a second-order
derivative will return a trivial result; for example: when \code{method} is
"lin", this will always be zero.)}

\item{na_rm}{Should missing values be removed before the computation? Default
is \code{FALSE}.}

\item{keep_obj}{Should the fitted object (from linear regression, smoothing
spline, or trend filtering) be returned, along with the estimated
derivative, in a list? This is typically to perform some kind of post hoc
inspection. Default is \code{FALSE}.}

\item{...}{Additional arguments to pass to the method used to estimate the
derivative. See details below.}
}
\description{
Estimates the derivative at the end of a sequence of values, using linear
regression, a smoothing spline, or trend filtering. This is a convenience
function to be used inside of a call to \code{epi_slide()}, see the \href{https://cmu-delphi.github.io/epiprocess/articles/derivative.html}{estimating derivatives vignette}
for examples.
}
\details{
The derivative is estimated using:

\itemize{
\item Linear regression, when \code{method} is "lin", via \code{stats::lsfit()}.
\item Cubic smoothing spline, when \code{method} is "ss", via
\code{stats::smooth.spline()}.
\item Polynomial trend filtering, when \code{method} is "tf", via
\code{genlasso::trendfilter()}.
}

The second and third cases base the derivative calculation on a nonparametric
fit and should typically be used with a larger window \code{n} in a parent call
to \code{epi_slide()}. The third case (trend filtering) is more locally adaptive
than the second (smoothing spline) and can work better when there are sharp
changes in the smoothness of the underlying values.

In the first and second cases (linear regression and smoothing spline), the
additional arguments in \code{...} are directly passed to the underlying
estimation function (\code{stats::lsfit()} and \code{stats::smooth.spline()}).

The third case (trend filtering) works a little differently: here, a custom
set of arguments is allowed (and are internally distributed as appropriate
to the functions \code{genlasso::trendfilter()}, \code{genlasso::cv.trendfilter()},
and \code{genlasso::coef.genlasso()}):

\describe{
\item{\code{ord}}{Order of piecewise polynomial for the trend filtering fit,
default is 2.}
\item{\code{maxsteps}}{Maximum number of steps to take in the solution path before
terminating, default is 100.}
\item{\code{cv}}{Boolean indicating whether cross-validation should be used to
choose an effective degrees of freedom for the fit, default is \code{FALSE}.}
\item{\code{k}}{Number of folds if cross-validation is to be used. Default is 5.}
\item{\code{df}}{Desired effective degrees of freedom for the trend filtering
fit. If \code{cv = FALSE}, then \code{df} must be an integer; if \code{cv = TRUE}, then
\code{df} should be one of "min" or "1se" indicating the selection rule to use
based on the cross-validation error curve (minimum or 1-standard-error
rule, respectively). Default is 8 when \code{cv = FALSE}, and "1se" when \code{cv = TRUE}.}
}
}
